#!/bin/bash

# This method of running tests in a Rails environment
# does not prepare the database first. As a benefit, the
# entire test run is much faster; the obvious drawback
# is that the test database could be out-of-sync.
#
# In order to get your test database in sync, you can pass
# the -m flag.
#
# You can specify tests by their path or by a regular
# expression, which can be any valid regular expression
# in Ruby.
#
# The script assumes that you are running in your Rails
# root directory, and that there is a "test" sub-directory.
#
# Examples:
#
#   This will expand to a Ruby regular expression:
#     run_tests -f job_review_
#
#   This will be fed to Ruby as is:
#     run_tests -f '/(job|worker)_test/'
#
#   These will require the following test(s) without a regular expression:
#     run_tests -f test/unit/job_test
#     run_tests -f test/unit/job_test.rb -f test/functionals/job_controller_test.rb

function usage()
{
  cat << EOF
  usage: $0 -f [path(s)|regex(s)] options

  This script runs tests specified by path(s) or regex(s). The
  -f argument may be specified multiple times.

  If the -n argument is given it will pass that to Test::Unit
  for method level filtering.

  OPTIONS:
     -n arg  Run test methods that match this string
     -f arg  Specify which test files to include (paths or regexs)
     -i      Run integration tests
     -t      Run functional tests
     -u      Run unit tests
     -m      Migrate the test database by running "rake db:test:prepare"
     -h, -?  Show this message
     -c      Start memcached before the run and stop it after
EOF

  # need to think about when, how to source plugin files
  usage_file="$(plugin_directory)/usage"

  if [ -e $usage_file ]
  then
    source $usage_file
    echo "  PLUGIN OPTIONS:"
  fi

  cat << EOF

  EXAMPLES:
     $0 -f job -n scheduling
     $0 -f test/unit/job_test.rb -f job_review_ -f '/(subm|worker)/'
EOF
  exit 1
}

function plugin_directory {
  SOURCE="${BASH_SOURCE[0]}"
  PLUGIN_DIR="$( dirname "$SOURCE" )"
  while [ -h "$SOURCE" ]
  do 
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    PLUGIN_DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
  done
  PLUGIN_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo $PLUGIN_DIR
}

function set_env_vars {
  RUBY_HEAP_MIN_SLOTS=500000
  RUBY_HEAP_SLOTS_INCREMENT=500000
  RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
  RUBY_GC_MALLOC_LIMIT=100000000
  RUBY_HEAP_FREE_MIN=500000
}

function start_memcache {
  echo "starting memcache"
  memcached -d -P ~/.memcache.pid
}

function stop_memcache {
  echo 'stopping memcache'
  cat ~/.memcache.pid | xargs kill -9 
}

function set_env_and_run_tests {
  if [[ $run_memcache == 1 ]]
  then
  	start_memcache
  fi

  set_env_vars
  kickoff_tests

  if [[ $run_memcache == 1 ]]
  then
	  stop_memcache
  fi
}

function kickoff_tests {
  cmd="%w{$tests}.each{|f| require f}"
  echo 'ruby -I:lib:test -rtest/unit -e "' $cmd '"'
  time ruby -I:lib:test -rtest/unit -e "$cmd"
}

function collect_tests {
  for test in $*
  do
    if [[ "$test" == /* && "$test" == */ ]]
    then
      find_tests_by_regex $test
      tests="$tests $files"
    elif [[ "$test" != *test/* ]]
    then
      find_tests_by_regex "/$test/"
      tests="$tests $files"
    else
      tests="$tests $test"
    fi
  done

  if [[ $run_all_units == 1 ]]
  then
    find_tests_under_dir_by_regex '/_test/' 'unit/**'
    tests="$tests $files"
  fi
  if [[ $run_all_functionals == 1 ]]
  then
    find_tests_under_dir_by_regex '/_test/' 'functional/**'
    tests="$tests $files"
  fi
  if [[ $run_all_integrations == 1 ]]
  then
    find_tests_under_dir_by_regex '/_test/' 'integration/**'
    tests="$tests $files"
  fi
}

function find_tests_by_regex {
  find_tests_under_dir_by_regex $1 '**'
}

function find_tests_under_dir_by_regex {
  files=`ruby -e "puts Dir['./test/$2/*.rb'].select{|e| File.basename(e) =~ $1}.map{|e| e.sub('./', '')}.join(' ')"`
}

function run_matching_test_methods {
  echo "ruby -Ilib:test -r test/unit $tests -n '/$matching_methods/'"
  time ruby -Ilib:test -r test/unit $tests -n "/$matching_methods/"
}

run_single=0
run_all_integrations=0
run_all_functionals=0
run_all_units=0
tests=""

while getopts “n:f:c?hmiut” OPTION
do
     case $OPTION in
         h)
             usage
             ;;
         n)
             matching_methods=$OPTARG
             run_single=1
             ;;
         f)
             collect_tests $OPTARG
             ;;
         m)
             rake db:test:prepare
             echo; echo
             ;;
         c)
             run_memcache=1
             ;;
         i)
             run_all_integrations=1
             collect_tests
             ;;
         u)
             run_all_units=1
             collect_tests
             ;;
         t)
             run_all_functionals=1
             collect_tests
             ;;
         ?)
             usage
             exit 1
             ;;
     esac
done

if [[ "$tests" == "" ]]
then
  echo ; echo 'Error: No tests selected.' ; echo
  usage
fi

if [[ $run_single == 1 ]]
then
  run_matching_test_methods
else
  set_env_and_run_tests
fi
